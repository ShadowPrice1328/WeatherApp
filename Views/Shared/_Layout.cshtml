@{
    var city = ViewData["City"] as string;
    bool isDarkTheme = Context.Request.Cookies["DarkTheme"] == "true";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        :root {
            --background-color: #fff;
            --text-color: #000;
        }
        body {
            background-color: var(--background-color);
            color: var(--text-color);
            transition: background-color 0.5s ease, color 0.5s ease;
        }
        .dark-theme {
            --background-color: #232323;
            --text-color: #fff;
        }
        body.dark-theme {
            background-color: var(--background-color);
            color: var(--text-color);
        }
        footer {
            transition: background-color 0.5s ease, color 0.5s ease;
        }
        nav {
            transition: background-color 0.5s ease, color 0.5s ease;
        }
    </style>

    <meta name="viewport" content="width:device-width">
    <link href="/lib/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <title>WeatherApp</title>

    <partial name="_Favicons"/>

    <nav class="navbar text-center">
        <div class="container-fluid" style="display: flex; justify-content: center; align-items: center">
            <a class="navbar-brand" href="/">WeatherApp</a>
            <button onclick="toggleDarkTheme()" class="m-3 float-end">Toggle dark mode</button>
        </div>
    </nav>

</head>
<body class="@((isDarkTheme) ? "dark-theme" : "")">
    <div class="container-fluid p-2">
        <partial name="_SearchBox" model="@city"/>

        <main role="main" class="container p-2" style="margin-bottom: 60px;">
            @RenderBody()
        </main>
    </div>

    <footer class="footer fixed-bottom text-muted p-2 text-center">
        <div class="container-fluid">
            &copy; 2023 - WeatherApp
            <p style="margin-bottom: 0;">
                <a href="https://github.com/ShadowPrice1328/WeatherApp" class="text-decoration-none">GitHub</a>
            </p>
        </div>
    </footer>

<script>
    // Function to toggle dark theme
    function toggleDarkTheme() {
        var body = document.body;
        var isDarkTheme = body.classList.toggle('dark-theme');

        // Set cookie
        document.cookie = "DarkTheme=" + isDarkTheme + "; path=/";

        changeTheme(isDarkTheme);
    }

    // Function to change theme based on the darkTheme parameter
    function changeTheme(darkTheme) {
        var footer = document.querySelector('footer');
        var nav = document.querySelector('nav');

        // Set styles for footer
        footer.style.backgroundColor = darkTheme ? '#2C3333' : '#f8f9fa';
        footer.style.color = darkTheme ? '#fff' : '#6c757d';
        footer.style.borderTop = darkTheme ? '1px solid #00FFFF' : '1px solid #dee2e6';
        footer.querySelector('div').style.color = darkTheme ? '#fff' : '#6c757d';
        footer.querySelector('p a').style.color = darkTheme ? '#00FFFF' : '#0a58ca';

        // Set styles for header (nav)
        nav.style.backgroundColor = darkTheme ? '#2C3333' : '#f8f9fa';
        nav.style.borderBottom = darkTheme ? '1px solid #00FFFF' : '1px solid #dee2e6';
        nav.querySelector('a').style.color = darkTheme ? '#fff' : '#181819';

        var button = document.getElementById('button-search');
        button.className = 'btn ' + (darkTheme ? 'btn-secondary' : 'btn-outline-secondary');
    }

    // Initial call to changeTheme on page load
    changeTheme(document.body.classList.contains('dark-theme'));
</script>

</body>
</html>